import type { TextDocument } from 'vscode-languageserver-textdocument';
import type * as vscode from 'vscode-languageserver';
export interface Range {
    start: number;
    end: number;
}
export declare enum Mode {
    /**
     * @case1
     * 123456 -> abcdef
     * ^    ^    ^    ^
     * @case2
     * 123456 -> abcdef
     *  ^  ^      ^  ^
     * @case3
     * 123456 -> abcdef
     *   ^^        ^^
     */
    Offset = 0,
    /**
     * @case1
     * 123456 -> abcdef
     * ^    ^    ^    ^
     * @case2
     * 123456 -> abcdef
     *  ^  ^     NOT_MATCH
     * @case3
     * 123456 -> abcdef
     *   ^^      NOT_MATCH
     */
    Totally = 1,
    /**
     * @case1
     * 123456 -> abcdef
     * ^    ^    ^    ^
     * @case2
     * 123456 -> abcdef
     *  ^  ^     ^    ^
     * @case3
     * 123456 -> abcdef
     *   ^^      ^    ^
     */
    Expand = 2,
    /**
     * @case1
     * 123456 -> abcdef
     * ^     ^   ^    ^
     * @case2
     * 123456 -> abcdef
     *      ^^   ^    ^
     * @case3
     * 123456 -> abcdef
     *       ^^  NOT_MATCH
     */
    Overlap = 3
}
export declare type MappingBase = {
    mode: Mode;
    sourceRange: Range;
    mappedRange: Range;
};
export declare type Mapping<T> = MappingBase & {
    data: T;
    additional?: MappingBase[];
};
export declare class SourceMap<Data = unknown> extends Set<Mapping<Data>> {
    sourceDocument: TextDocument;
    mappedDocument: TextDocument;
    constructor(sourceDocument: TextDocument, mappedDocument: TextDocument, mappings?: Mapping<Data>[]);
    cache: Map<string, {
        data: Data;
        start: vscode.Position;
        end: vscode.Position;
    }[]>;
    cache2: Map<string, {
        data: Data;
        start: number;
        end: number;
    }[]>;
    isSourceRange(start: vscode.Position, end?: vscode.Position): boolean;
    isMappedRange(start: vscode.Position, end?: vscode.Position): boolean;
    getSourceRange(start: vscode.Position, end?: vscode.Position): {
        data: Data;
        start: vscode.Position;
        end: vscode.Position;
    } | undefined;
    getMappedRange(start: vscode.Position, end?: vscode.Position): {
        data: Data;
        start: vscode.Position;
        end: vscode.Position;
    } | undefined;
    getSourceRanges(start: vscode.Position, end?: vscode.Position): {
        data: Data;
        start: vscode.Position;
        end: vscode.Position;
    }[];
    getMappedRanges(start: vscode.Position, end?: vscode.Position): {
        data: Data;
        start: vscode.Position;
        end: vscode.Position;
    }[];
    private getRanges;
    isSourceRange2(start: number, end?: number): boolean;
    isMappedRange2(start: number, end?: number): boolean;
    getSourceRange2(start: number, end?: number): {
        data: Data;
        start: number;
        end: number;
    } | undefined;
    getMappedRange2(start: number, end?: number): {
        data: Data;
        start: number;
        end: number;
    } | undefined;
    getSourceRanges2(start: number, end?: number): {
        data: Data;
        start: number;
        end: number;
    }[];
    getMappedRanges2(start: number, end?: number): {
        data: Data;
        start: number;
        end: number;
    }[];
    private getRanges2;
    private getRange;
}
