export interface Listener<Payload> {
    (a: Payload, ...payload: any[]): void;
    beforeEmit?: (payload: Payload) => boolean;
}
export interface ListenersMap<Payload> {
    [propName: string]: Listener<Payload>[] | undefined;
}
export default class<Payload = any> {
    listenersMap: ListenersMap<Payload>;
    /**
     * 绑定事件
     * @param eventName 事件名
     * @param listener 回调函数
     * @param beforeEmit 触发拦截器, 一般用在对on的二次封装
     */
    on(eventName: string | string[], listener: Listener<Payload>, beforeEmit?: (payload: Payload) => boolean): this;
    /**
     * 按照监听器注册的顺序，同步地调用每个注册到名为 eventName 的事件的监听器，并传入提供的参数。
     * @param eventName 事件名
     * @param payload 载荷数据
     * @returns  如果事件有监听器，则返回 true，否则返回 false。
     */
    emit(eventName: string, payload?: any): void;
    /**
     * 解除绑定,
     * 如果不指定listener,
     * 那么解除所有eventName对应回调
     * @param eventName 事件名
     * @param listener 回调函数
     */
    off(eventName: string, listener?: Listener<Payload>): void;
    /**
     * 销毁实例
     */
    destroy(): void;
}
