import { __values } from 'tslib';

var default_1 = (function () {
    function default_1() {
        this.listenersMap = {};
    }
    default_1.prototype.on = function (eventName, listener, beforeEmit) {
        var e_1, _a;
        var eventNames = Array.isArray(eventName) ? eventName : [eventName];
        try {
            for (var eventNames_1 = __values(eventNames), eventNames_1_1 = eventNames_1.next(); !eventNames_1_1.done; eventNames_1_1 = eventNames_1.next()) {
                var name = eventNames_1_1.value;
                if (void 0 === this.listenersMap[name]) {
                    this.listenersMap[name] = [];
                }
                listener.beforeEmit = beforeEmit;
                this.listenersMap[name].push(listener);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (eventNames_1_1 && !eventNames_1_1.done && (_a = eventNames_1.return)) _a.call(eventNames_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    default_1.prototype.emit = function (eventName, payload) {
        var e_2, _a;
        var listeners = this.listenersMap[eventName];
        if (void 0 !== listeners && 0 < listeners.length) {
            try {
                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
                    var listener = listeners_1_1.value;
                    if (void 0 === listener.beforeEmit) {
                        listener(payload);
                    }
                    else if (void 0 !== payload && listener.beforeEmit(payload)) {
                        listener(payload);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    default_1.prototype.off = function (eventName, listener) {
        var listeners = this.listenersMap[eventName];
        if (void 0 !== listeners) {
            if (void 0 === listener) {
                delete this.listenersMap[eventName];
            }
            else {
                var index = listeners.findIndex(function (fn) { return fn === listener; });
                listeners.splice(index, 1);
            }
        }
    };
    default_1.prototype.destroy = function () {
        this.listenersMap = {};
    };
    return default_1;
}());

export default default_1;
