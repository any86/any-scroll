import { __extends, __assign } from 'tslib';
import { INPUT_START, STATUS_RECOGNIZED, INPUT_END, DIRECTION_UP, INPUT_CANCEL, STATUS_FAILED } from '@any-touch/shared';
import { ComputeDistance } from '@any-touch/compute';
import Recognizer, { resetStatusForPressMoveLike } from '@any-touch/recognizer';

var DEFAULT_OPTIONS = {
    name: 'press',
    pointLength: 1,
    maxDistance: 9,
    minPressTime: 251,
};
var default_1 = (function (_super) {
    __extends(default_1, _super);
    function default_1(options) {
        var _this = _super.call(this, __assign(__assign({}, DEFAULT_OPTIONS), options)) || this;
        _this.computeFunctions = [ComputeDistance];
        return _this;
    }
    default_1.prototype.recognize = function (computed, emit) {
        var _this = this;
        var stage = computed.stage, startInput = computed.startInput, pointLength = computed.pointLength;
        if (INPUT_START === stage && this._$isValidPointLength(pointLength)) {
            resetStatusForPressMoveLike(this);
            this._$cancel();
            this._timeoutId = setTimeout(function () {
                _this.status = STATUS_RECOGNIZED;
                emit(_this.options.name);
            }, this.options.minPressTime);
        }
        else if (INPUT_END === stage && STATUS_RECOGNIZED === this.status) {
            emit("" + this.options.name + DIRECTION_UP);
        }
        else if (STATUS_RECOGNIZED !== this.status) {
            var deltaTime = computed.timestamp - startInput.timestamp;
            if (!this._$test(computed) ||
                (this.options.minPressTime > deltaTime && [INPUT_END, INPUT_CANCEL].includes(stage))) {
                this._$cancel();
                this.status = STATUS_FAILED;
            }
        }
    };
    default_1.prototype._$test = function (computed) {
        var distance = computed.distance;
        return this.options.maxDistance > distance;
    };
    default_1.prototype._$cancel = function () {
        clearTimeout(this._timeoutId);
    };
    return default_1;
}(Recognizer));

export default default_1;
