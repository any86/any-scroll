/**
 * 主程序, 不包含手势,
 * 主要用来适配Mouse/Touch事件
 * ==================== 参考 ====================
 * https://segmentfault.com/a/1190000010511484#articleHeader0
 * https://segmentfault.com/a/1190000007448808#articleHeader1
 * hammer.js http://hammerjs.github.io/
 * ==================== 流程 ====================
 * Event(Mouse|Touch) => BaseInput => Input => Computed => AnyTouchEvent
 */
import AnyEvent from 'any-event';
import { Listener } from 'any-event';
import { RecognizerConstruct, AnyTouchEvent, SupportEvent, ComputeFunction, ComputeWrapFunction, InputCreatorFunctionMap } from '@any-touch/shared';
import { Recognizer, STATUS_POSSIBLE, STATUS_START, STATUS_MOVE, STATUS_END, STATUS_CANCELLED, STATUS_FAILED, STATUS_RECOGNIZED } from '@any-touch/shared';
declare type BeforeEachHook = (recognizer: Recognizer, map: Record<string, Recognizer>, next: () => void) => void;
/**
 * 默认设置
 */
export interface Options {
    domEvents?: false | EventInit;
    preventDefault?: boolean;
    preventDefaultExclude?: RegExp | ((ev: SupportEvent) => boolean);
}
export default class AnyTouch extends AnyEvent<AnyTouchEvent> {
    static Tap: RecognizerConstruct;
    static Pan: RecognizerConstruct;
    static Swipe: RecognizerConstruct;
    static Press: RecognizerConstruct;
    static Pinch: RecognizerConstruct;
    static Rotate: RecognizerConstruct;
    static STATUS_POSSIBLE: typeof STATUS_POSSIBLE;
    static STATUS_START: typeof STATUS_START;
    static STATUS_MOVE: typeof STATUS_MOVE;
    static STATUS_END: typeof STATUS_END;
    static STATUS_CANCELLED: typeof STATUS_CANCELLED;
    static STATUS_FAILED: typeof STATUS_FAILED;
    static STATUS_RECOGNIZED: typeof STATUS_RECOGNIZED;
    static version: string;
    static _$Recognizers: any;
    static _$computeFunctionMap: Record<string, ComputeWrapFunction>;
    /**
     * 安装插件
     * @param {AnyTouchPlugin} 插件
     * @param {any[]} 插件参数
     */
    static use: (Recognizer: new (...args: any) => any, recognizerOptions?: Record<string, any>) => void;
    _$computeFunctionMap: Record<string, ComputeFunction>;
    el?: HTMLElement;
    options: Options;
    _$inputCreatorMap: InputCreatorFunctionMap;
    _$recognizerMap: Record<string, Recognizer>;
    _$recognizers: Recognizer[];
    beforeEachHook?: BeforeEachHook;
    /**
     * @param el目标元素, 微信下没有el
     * @param options 选项
     */
    constructor(el?: HTMLElement, options?: Options);
    target(el: HTMLElement): {
        on: (eventName: string, listener: Listener<AnyTouchEvent>) => void;
    };
    /**
     * 监听input变化s
     * @param event Touch / Mouse事件对象
     */
    catchEvent(event: SupportEvent): void;
    /**
     * 使用插件
     * @param {AnyTouchPlugin} 插件
     * @param {Object} 选项
     */
    use(Recognizer: new (...args: any) => Recognizer, recognizerOptions?: Record<string, any>): void;
    /**
     * 移除插件
     * @param {String} 识别器name
     */
    removeUse(recognizerName?: string): void;
    /**
     * 事件拦截器
     * @param hook 钩子函数
     */
    beforeEach(hook: (recognizer: Recognizer, map: Record<string, Recognizer>, next: () => void) => void): void;
    /**
     * 获取识别器通过名字
     * @param name 识别器的名字
     * @return 返回识别器
     */
    get(name: string): Recognizer | void;
    /**
     * 设置
     * @param options 选项
     */
    set(options: Options): void;
    /**
     * 销毁
     */
    destroy(): void;
}
export {};
