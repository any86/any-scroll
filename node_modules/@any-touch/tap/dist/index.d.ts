import { Computed } from '@any-touch/shared';
import Recognizer from '@any-touch/recognizer';
declare const DEFAULT_OPTIONS: {
    name: string;
    pointLength: number;
    tapTimes: number;
    waitNextTapTime: number;
    maxDistance: number;
    maxDistanceFromPrevTap: number;
    maxPressTime: number;
};
export default class extends Recognizer {
    private _$tapCount;
    private _$prevTapPoint?;
    private _$prevTapTime?;
    private _$countDownToFailTimer?;
    constructor(options: Partial<typeof DEFAULT_OPTIONS>);
    /**
     * 判断前后2次点击的距离是否超过阈值
     * @param {Point} 当前触点中心坐标
     * @return {Boolean} 前后2次点击的距离是否超过阈值
     */
    private _isValidDistanceFromPrevTap;
    /**
     * 校验2次tap的时间间隔是否满足
     * @return {Boolean} 是否满足
     */
    private _isValidInterval;
    /**
     * 识别后执行, 流程如下:
     *             开始
     *              |
     *         <是否end阶段> - 否 - 结束
     *              |
     *          关闭定时器c1和c2
     *              |
     *          清除等待状态
     *              |
     *              是
     *              |
     *        重置状态为"可能是"
     *              |
     *        <是否满足单击条件> - 否 - 结束
     *              |
     *              是
     *              |
     *       <是否正确连击：是否上次点击信息为空 或 与上次点击的位移/时间是否满足约束> - 否 - 点击次数=1 - 继续(<是否到达点击数要求>)
     *              |
     *              是
     *              |
     *           点击次数+1
     *              |
     *       <是否到达点击数要求> - 否 - 设置定时器c1(t1毫秒后状态设置为"失败") - 结束
     *              |
     *              是
     *              |
     *      <是否需要其他手势失败> - 否 - 触发事件, 状态设置为"已识别",重置(点击次数,位置) - 结束
     *              |
     *              是
     *              |
     *           进入等待状态
     *              |
     *  <设置定时器c2(t1毫秒后检查"需要失败"的手势是否是"失败"状态, 重置(点击次数,位置, 等待状态)> - 否 - 设置状态为"失败" - 结束
     *              |
     *              是
     *              |
     *       触发, 状态设置为"已识别", 重置(点击次数,位置)
     *              |
     *             结束
     *
     * @param {Input} 计算数据
     */
    recognize(computed: Computed, emit: (type: string, ...payload: any[]) => void): void;
    /**
     * 指定时候后, 状态变为"失败"
     */
    private _$countDownToFail;
    private _$reset;
    /**
      * 识别条件
      * @param computed 计算结果
      * @return 是否验证成功
      */
    _$test(computed: Computed): boolean;
}
export {};
