import { STATUS_POSSIBLE, STATUS_START, STATUS_MOVE, STATUS_END, STATUS_CANCELLED, STATUS_FAILED, STATUS_RECOGNIZED } from '@any-touch/shared';
import Base from '@any-touch/recognizer';
/**
 * 基础识别器类型
 */
export declare type Recognizer = Base;
export declare type AnyTouchPlugin = any;
export declare type RecognizerConstruct = typeof Base;
/**
 * 适配器支持的事件类型
 */
export declare type SupportEvent = MouseEvent | TouchEvent;
export interface PointClientXY {
    target: EventTarget | null;
    clientX: number;
    clientY: number;
}
/**
 * 输入阶段
 */
export declare type stage = 'start' | 'move' | 'end' | 'cancel';
/**
 * 原生事件对象最基础的统一化
 */
export interface BasicsInput {
    readonly stage: stage;
    readonly changedPoints: PointClientXY[];
    readonly points: PointClientXY[];
    readonly target: EventTarget | null;
    readonly targets: (EventTarget | null)[];
    readonly nativeEvent: Event;
}
/**
 * 不包含prevInput/startInput/startMultiInput的Input
 */
export interface InputOnlyHasCurrent extends BasicsInput {
    readonly id: number;
    readonly isStart: boolean;
    readonly isEnd: boolean;
    readonly pointLength: number;
    readonly timestamp: number;
    readonly target: EventTarget | null;
    readonly currentTarget: EventTarget | null;
    readonly center?: Point;
    readonly x: number;
    readonly y: number;
    readonly getOffset: (el: HTMLElement) => {
        x: number;
        y: number;
    };
}
/**
 * 统一化event后数据
 */
export interface Input extends InputOnlyHasCurrent {
    readonly startInput: InputOnlyHasCurrent;
    readonly startMultiInput?: InputOnlyHasCurrent;
    readonly prevInput?: InputOnlyHasCurrent;
}
/**
 * 计算函数
 */
export interface ComputeFunction {
    (input: Input): Partial<Computed> | void;
}
/**
 * 计算函数外壳函数
 */
export interface ComputeWrapFunction {
    (): ComputeFunction;
    _id: string;
}
/**
 * 仅用来作为识别器和at通知的载体函数
 */
export interface EventTrigger {
    (type: string): void;
}
/**
 * 方向
 */
export declare type directionString = 'up' | 'right' | 'down' | 'left' | 'none';
/**
 * 点
 */
export interface Point {
    x: number;
    y: number;
}
export declare type Vector = Point;
/**
 * 仅仅是获取scale/angle的前置计算值
 */
export interface VS {
    prevV: Point;
    startV: Point;
    activeV: Point;
}
/**
 * Input执行计算后的数据格式
 */
export interface Computed extends Input {
    readonly maxPointLength: number;
    readonly velocityX: number;
    readonly velocityY: number;
    readonly speedX: number;
    readonly speedY: number;
    readonly scale: number;
    readonly deltaScale: number;
    readonly angle: number;
    readonly deltaAngle: number;
    readonly deltaX: number;
    readonly deltaY: number;
    readonly deltaXYAngle: number;
    readonly displacementX: number;
    readonly displacementY: number;
    readonly distanceX: number;
    readonly distanceY: number;
    readonly distance: number;
    readonly deltaTime: number;
    readonly overallDirection: directionString;
    readonly direction: directionString;
}
export interface AnyTouchEvent extends Input, Readonly<Computed> {
    readonly type: string;
    readonly stopPropagation: () => void;
    readonly stopImmediatePropagation: () => void;
    readonly preventDefault: () => void;
}
/**
 * 识别器状态
 */
export declare type _$recognizerstatus = typeof STATUS_POSSIBLE | typeof STATUS_START | typeof STATUS_MOVE | typeof STATUS_END | typeof STATUS_CANCELLED | typeof STATUS_FAILED | typeof STATUS_RECOGNIZED;
/**
 * Input转换器
 */
export interface InputCreatorFunction<T> {
    (event: T): void | Input;
}
export interface InputCreatorWrapFunction {
    (el?: HTMLElement): InputCreatorFunction<TouchEvent>;
    (): InputCreatorFunction<MouseEvent>;
}
/**
 * Input转换器外壳函数映射
 */
export interface InputCreatorFunctionMap {
    [k: string]: InputCreatorFunction<SupportEvent>;
}
