import { __assign } from 'tslib';
import { STATUS_END, STATUS_CANCELLED, STATUS_RECOGNIZED, STATUS_FAILED, STATUS_POSSIBLE, STATUS_START, STATUS_MOVE, INPUT_MOVE, INPUT_END, INPUT_CANCEL, INPUT_START } from '@any-touch/shared';

function resetStatus (recognizer) {
    if ([STATUS_END, STATUS_CANCELLED, STATUS_RECOGNIZED, STATUS_FAILED].includes(recognizer.status)) {
        recognizer.status = STATUS_POSSIBLE;
    }
}

function flow(isVaild, lastStatus, stage) {
    var _a, _b, _c, _d, _e, _f, _g;
    var STATE_MAP = {
        1: (_a = {},
            _a[STATUS_POSSIBLE] = (_b = {},
                _b[INPUT_MOVE] = STATUS_START,
                _b[INPUT_END] = STATUS_FAILED,
                _b[INPUT_CANCEL] = STATUS_FAILED,
                _b),
            _a[STATUS_START] = (_c = {},
                _c[INPUT_MOVE] = STATUS_MOVE,
                _c[INPUT_END] = STATUS_END,
                _c[INPUT_CANCEL] = STATUS_CANCELLED,
                _c),
            _a[STATUS_MOVE] = (_d = {},
                _d[INPUT_MOVE] = STATUS_MOVE,
                _d[INPUT_END] = STATUS_END,
                _d[INPUT_CANCEL] = STATUS_CANCELLED,
                _d),
            _a),
        0: (_e = {},
            _e[STATUS_START] = (_f = {},
                _f[INPUT_MOVE] = STATUS_FAILED,
                _f[INPUT_END] = STATUS_END,
                _f[INPUT_CANCEL] = STATUS_CANCELLED,
                _f),
            _e[STATUS_MOVE] = (_g = {},
                _g[INPUT_START] = STATUS_FAILED,
                _g[INPUT_MOVE] = STATUS_FAILED,
                _g[INPUT_END] = STATUS_END,
                _g[INPUT_CANCEL] = STATUS_CANCELLED,
                _g),
            _e)
    };
    var stageToStatusMap = STATE_MAP[Number(isVaild)][lastStatus];
    return void 0 !== stageToStatusMap && stageToStatusMap[stage] || lastStatus;
}
function recognizeForPressMoveLike (recognizer, computed, emit) {
    var isVaild = recognizer._$test(computed);
    resetStatus(recognizer);
    var stage = computed.stage;
    recognizer.status = flow(isVaild, recognizer.status, stage);
    recognizer._$isRecognized = [STATUS_START, STATUS_MOVE].includes(recognizer.status);
    var name = recognizer.name, status = recognizer.status, isRecognized = recognizer._$isRecognized;
    if (isRecognized) {
        emit(name);
    }
    if (isRecognized || [STATUS_END, STATUS_CANCELLED].includes(recognizer.status)) {
        emit(name + status);
    }
    return isVaild;
}

var default_1 = (function () {
    function default_1(options) {
        this.disabled = false;
        this._$isRecognized = false;
        this.status = STATUS_POSSIBLE;
        this.computeFunctions = [];
        this.options = options;
        this.name = this.options.name;
    }
    default_1.prototype.set = function (options) {
        if (void 0 !== options) {
            this.options = __assign(__assign({}, this.options), options);
        }
        return this;
    };
    default_1.prototype._$isValidPointLength = function (pointLength) {
        return this.options.pointLength === pointLength;
    };
    return default_1;
}());

export default default_1;
export { recognizeForPressMoveLike, resetStatus as resetStatusForPressMoveLike };
